# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Notification implements Node {
  id: ID!
  name: String!
}

type Template implements Node {
  id: ID!
  name: String!
  type: TemplateType!
  markup: String!
  interfacePlaceholders: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy(where: UserWhereInput): User
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  templates(where: TemplateWhereInput, orderBy: TemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Template!]
}


#
# Other Types
#

type AggregateNotification {
  count: Int!
}

type AggregateTemplate {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createTemplate(data: TemplateCreateInput!): Template!
  createNotification(data: NotificationCreateInput!): Notification!
  createUser(data: UserCreateInput!): User!
  updateTemplate(data: TemplateUpdateInput!, where: TemplateWhereUniqueInput!): Template
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteTemplate(where: TemplateWhereUniqueInput!): Template
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteUser(where: UserWhereUniqueInput!): User
  upsertTemplate(where: TemplateWhereUniqueInput!, create: TemplateCreateInput!, update: TemplateUpdateInput!): Template!
  upsertNotification(where: NotificationWhereUniqueInput!, create: NotificationCreateInput!, update: NotificationUpdateInput!): Notification!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyTemplates(data: TemplateUpdateInput!, where: TemplateWhereInput): BatchPayload!
  updateManyNotifications(data: NotificationUpdateInput!, where: NotificationWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyTemplates(where: TemplateWhereInput): BatchPayload!
  deleteManyNotifications(where: NotificationWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
A connection to a list of items.
"""
type NotificationConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [NotificationEdge]!
  aggregate: AggregateNotification!
}

input NotificationCreateInput {
  name: String!
}

"""
An edge in a connection.
"""
type NotificationEdge {
  """
  The item at the end of the edge.
  """
  node: Notification!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum NotificationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type NotificationPreviousValues {
  id: ID!
  name: String!
}

type NotificationSubscriptionPayload {
  mutation: MutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [NotificationSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [NotificationSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [NotificationSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NotificationWhereInput
}

input NotificationUpdateInput {
  name: String
}

input NotificationWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [NotificationWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [NotificationWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [NotificationWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
}

input NotificationWhereUniqueInput {
  id: ID
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  templates(where: TemplateWhereInput, orderBy: TemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Template]!
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  template(where: TemplateWhereUniqueInput!): Template
  notification(where: NotificationWhereUniqueInput!): Notification
  user(where: UserWhereUniqueInput!): User
  templatesConnection(where: TemplateWhereInput, orderBy: TemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TemplateConnection!
  notificationsConnection(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  template(where: TemplateSubscriptionWhereInput): TemplateSubscriptionPayload
  notification(where: NotificationSubscriptionWhereInput): NotificationSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

"""
A connection to a list of items.
"""
type TemplateConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [TemplateEdge]!
  aggregate: AggregateTemplate!
}

input TemplateCreateInput {
  name: String!
  type: TemplateType!
  markup: String!
  interfacePlaceholders: String!
  createdBy: UserCreateOneWithoutTemplatesInput
}

input TemplateCreateManyWithoutCreatedByInput {
  create: [TemplateCreateWithoutCreatedByInput!]
  connect: [TemplateWhereUniqueInput!]
}

input TemplateCreateWithoutCreatedByInput {
  name: String!
  type: TemplateType!
  markup: String!
  interfacePlaceholders: String!
}

"""
An edge in a connection.
"""
type TemplateEdge {
  """
  The item at the end of the edge.
  """
  node: Template!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum TemplateOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  markup_ASC
  markup_DESC
  interfacePlaceholders_ASC
  interfacePlaceholders_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TemplatePreviousValues {
  id: ID!
  name: String!
  type: TemplateType!
  markup: String!
  interfacePlaceholders: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TemplateSubscriptionPayload {
  mutation: MutationType!
  node: Template
  updatedFields: [String!]
  previousValues: TemplatePreviousValues
}

input TemplateSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TemplateSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [TemplateSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [TemplateSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TemplateWhereInput
}

enum TemplateType {
  Banner
  InApp
  Dashboard
  Popup
  BigInAppPopup
}

input TemplateUpdateInput {
  name: String
  type: TemplateType
  markup: String
  interfacePlaceholders: String
  createdBy: UserUpdateOneWithoutTemplatesInput
}

input TemplateUpdateManyWithoutCreatedByInput {
  create: [TemplateCreateWithoutCreatedByInput!]
  connect: [TemplateWhereUniqueInput!]
  disconnect: [TemplateWhereUniqueInput!]
  delete: [TemplateWhereUniqueInput!]
  update: [TemplateUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [TemplateUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input TemplateUpdateWithoutCreatedByDataInput {
  name: String
  type: TemplateType
  markup: String
  interfacePlaceholders: String
}

input TemplateUpdateWithWhereUniqueWithoutCreatedByInput {
  where: TemplateWhereUniqueInput!
  data: TemplateUpdateWithoutCreatedByDataInput!
}

input TemplateUpsertWithWhereUniqueWithoutCreatedByInput {
  where: TemplateWhereUniqueInput!
  update: TemplateUpdateWithoutCreatedByDataInput!
  create: TemplateCreateWithoutCreatedByInput!
}

input TemplateWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TemplateWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [TemplateWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [TemplateWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  type: TemplateType
  """
  All values that are not equal to given value.
  """
  type_not: TemplateType
  """
  All values that are contained in given list.
  """
  type_in: [TemplateType!]
  """
  All values that are not contained in given list.
  """
  type_not_in: [TemplateType!]
  markup: String
  """
  All values that are not equal to given value.
  """
  markup_not: String
  """
  All values that are contained in given list.
  """
  markup_in: [String!]
  """
  All values that are not contained in given list.
  """
  markup_not_in: [String!]
  """
  All values less than the given value.
  """
  markup_lt: String
  """
  All values less than or equal the given value.
  """
  markup_lte: String
  """
  All values greater than the given value.
  """
  markup_gt: String
  """
  All values greater than or equal the given value.
  """
  markup_gte: String
  """
  All values containing the given string.
  """
  markup_contains: String
  """
  All values not containing the given string.
  """
  markup_not_contains: String
  """
  All values starting with the given string.
  """
  markup_starts_with: String
  """
  All values not starting with the given string.
  """
  markup_not_starts_with: String
  """
  All values ending with the given string.
  """
  markup_ends_with: String
  """
  All values not ending with the given string.
  """
  markup_not_ends_with: String
  interfacePlaceholders: String
  """
  All values that are not equal to given value.
  """
  interfacePlaceholders_not: String
  """
  All values that are contained in given list.
  """
  interfacePlaceholders_in: [String!]
  """
  All values that are not contained in given list.
  """
  interfacePlaceholders_not_in: [String!]
  """
  All values less than the given value.
  """
  interfacePlaceholders_lt: String
  """
  All values less than or equal the given value.
  """
  interfacePlaceholders_lte: String
  """
  All values greater than the given value.
  """
  interfacePlaceholders_gt: String
  """
  All values greater than or equal the given value.
  """
  interfacePlaceholders_gte: String
  """
  All values containing the given string.
  """
  interfacePlaceholders_contains: String
  """
  All values not containing the given string.
  """
  interfacePlaceholders_not_contains: String
  """
  All values starting with the given string.
  """
  interfacePlaceholders_starts_with: String
  """
  All values not starting with the given string.
  """
  interfacePlaceholders_not_starts_with: String
  """
  All values ending with the given string.
  """
  interfacePlaceholders_ends_with: String
  """
  All values not ending with the given string.
  """
  interfacePlaceholders_not_ends_with: String
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  createdBy: UserWhereInput
}

input TemplateWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  templates: TemplateCreateManyWithoutCreatedByInput
}

input UserCreateOneWithoutTemplatesInput {
  create: UserCreateWithoutTemplatesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutTemplatesInput {
  name: String!
  email: String!
  password: String!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  templates: TemplateUpdateManyWithoutCreatedByInput
}

input UserUpdateOneWithoutTemplatesInput {
  create: UserCreateWithoutTemplatesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutTemplatesDataInput
  upsert: UserUpsertWithoutTemplatesInput
}

input UserUpdateWithoutTemplatesDataInput {
  name: String
  email: String
  password: String
}

input UserUpsertWithoutTemplatesInput {
  update: UserUpdateWithoutTemplatesDataInput!
  create: UserCreateWithoutTemplatesInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  templates_every: TemplateWhereInput
  templates_some: TemplateWhereInput
  templates_none: TemplateWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
